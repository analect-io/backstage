app:
  title: Scaffolded Backstage App
  baseUrl: http://backstage.local:3000

  support:
    url: https://github.com/analect-io/backstage/issues # Used by common ErrorPage
    items: # Used by common SupportButton component
      - title: Issues
        icon: github
        links:
          - url: https://github.com/backstage/backstage/issues
            title: GitHub Issues
      - title: Slack Chatroom
        icon: chat
        links:
          - url: https://analect.slack.com/archives/C04NPS4UL79
            title: '#backstage'

organization:
  name: Analect

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/tutorials/backend-to-backend-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://backstage.local:7007
  listen:
    port: 7007
    host: 0.0.0.0
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    img-src: ["'self'", 'data:', 'https://avatars.githubusercontent.com']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://backstage.local:3000
    methods: [GET, POST, PUT, DELETE]
    credentials: true
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      database: ${POSTGRES_DATABASE}
    ensureExists: true
    pluginDivisionMode: schema
    plugin:
      catalog:
        connection:
          database: ${POSTGRES_DATABASE}
      auth:
        connection:
          database: ${POSTGRES_DATABASE}
      app:
        connection:
          database: ${POSTGRES_DATABASE}
      scaffolder:
        connection:
          database: ${POSTGRES_DATABASE}
  cache:
    store: memory
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      apps:
        - appId: ${BACK_GITHUB_APP_APP_ID}
          webhookUrl: ${BACK_GITHUB_APP_WEBHOOK_URL}
          clientId: ${BACK_GITHUB_APP_CLIENT_ID}
          clientSecret: ${BACK_GITHUB_APP_CLIENT_SECRET}
          webhookSecret: ${BACK_GITHUB_APP_WEBHOOK_SECRET}
          privateKey: ${BACK_GITHUB_APP_PRIVATE_KEY}
        #- $include: ./backstage-integration-config.yaml
      #token: ${GITHUB_TOKEN}

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'external' # Alternatives - 'local' or 'external'
  # generator:
  #   runIn: 'local'
  publisher:
    type: 'awsS3'
    awsS3:
      bucketName: ${TECHDOCS_BUCKET}
      region: ${AWS_REGION}
      credentials:
        accessKeyId: ${AWS_ACCESS_KEY_ID}
        secretAccessKey: ${AWS_SECRET_ACCESS_KEY}

aws:
  accounts:
    - accountId: 'aws-proton-backend-user'
      accessKeyId: ${AWS_PROTON_USER_ACCESS_KEY_ID}
      secretAccessKey: ${AWS_PROTON_USER_SECRET_ACCESS_KEY}

proxy:
  '/argocd/api':
    target: https://argocd.analect.com/api/v1/
    changeOrigin: true
    # only if your argocd api has self-signed cert
    secure: true
    headers:
      Cookie:
        $env: ARGOCD_AUTH_TOKEN

  '/grafana/api':
    # May be an internal DNS
    target: https://grafana.analect.com/
    headers:
      Authorization: Bearer ${GRAFANA_TOKEN}

  '/prometheus/api':
    # url to the api and path of your hosted prometheus instance
    target: http://prometheus-server.monitoring.svc/api/v1/

  # '/snyk':
  #   target: https://snyk.io/api/v1
  #   headers:
  #     User-Agent: tech-services/backstage-plugin/1.0
  #     Authorization:
  #       $env: SNYK_TOKEN

sonarqube:
  baseUrl: https://sonar.analect.com
  apiKey: '${SONARQUBE_TOKEN}'

grafana:
  # Publicly accessible domain
  domain: https://grafana.analect.com

# auth:
#   # see https://backstage.io/docs/auth/ to learn about auth providers
#   providers: {}

auth:
  environment: development
  providers:
    github:
      development:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options
  defaultAuthor:
    name: ':robot: [backstage-bot]'
    email: info@analect.com
  # defaultCommitMessage: "ðŸ¤– U can't touch this" # Defaults to 'Initial commit'

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow:
        - API
        - Component
        - Domain
        - Group
        - System
        - User
        - Template
        - Resource
        - Location

  locations:
    # Backstage example components
    - type: url
      target: https://github.com/analect-io/backstage-catalog/blob/main/analect-io/all.yaml

    - type: url
      target: https://github.com/analect-io/backstage/blob/main/catalog-info.yaml