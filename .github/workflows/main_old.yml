# This workflow uses actions that are not certified by GitHub.
# São fornecidas por terceiros e regidas por
# termos de serviço, política de privacidade e suporte separados
# documentação.

name: main

on:
  push:
    branches: [ main ]
  pull_request:
    branches: ["main"]

# permissions:
#   pull-requests: write
#   issues: write
#   repository-projects: write

jobs:
  vars:
    name: Setup Environment 🛠️
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
    steps:
      - id: vars
        run: |
          if [[ ! "$GITHUB_REF" =~ refs/tags ]]; then
            #echo "::set-output name=tag::$(echo $GITHUB_SHA | cut -c 1-8)"
            echo "tag=$(echo $GITHUB_SHA | cut -c 1-8)" >> $GITHUB_OUTPUT
          else
            #echo "::set-output name=tag::$(echo $GITHUB_REF | cut -d / -f 3)"
            echo "tag=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT
          fi
      - run: echo "${{ steps.vars.outputs.tag }}"

  sonarqube:
    name: SonarQube Scan 🔍
    runs-on: ubuntu-latest
    needs:
      - vars
    steps:
    - name: Checkout 🛎️
      uses: actions/checkout@v3
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarQube Scan 🔍
      uses: kitabisa/sonarqube-action@v1.2.0
      with:
        host: ${{ secrets.SONARQUBE_HOST }}
        login: ${{ secrets.SONARQUBE_TOKEN }}

  build:
    name: Yarn Build 📦
    runs-on: ubuntu-latest
    needs:
      - vars
      - sonarqube
    steps:
      - name: app checkout
        uses: actions/checkout@v3

      - name: Configure Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Cache node_modules
        id: cache-modules
        uses: actions/cache@v3
        with:
          path: app/node_modules
          key: npm-build-${{ hashFiles('app/package-lock.json') }}
          restore-keys: |
            npm-build-
            npm-

      - name: yarn install and build
        run: |
          cd app/
          yarn add --cwd packages/app @backstage/plugin-sonarqube
          yarn install --frozen-lockfile
          yarn tsc
          yarn build

      - name: persist build files
        uses: actions/upload-artifact@v3
        with:
          name: app-folder
          path: app/packages/backend/dist
          if-no-files-found: error

  build-and-push:
    name: Build and Push 📦
    runs-on: ubuntu-latest
    needs:
      - vars
      - build
      - sonarqube
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3

      - name: Set rev.txt 🛠️
        run: git show -s --format="%ai %H %s %aN" HEAD > rev.txt

      - name: grant dist folder exists
        run: mkdir -p app/packages/backend/dist

      - name: restore build files
        uses: actions/download-artifact@v3
        with:
          name: app-folder
          path: app/packages/backend/dist

      - name: verify artifacts before
        run: ls -lRa app/packages/backend/dist

      - name: Login Docker Registry 🪪
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build and Push Docker 🚀
        run: |
          cd app/
          docker image build . -f packages/backend/Dockerfile --tag ghcr.io/analect/backstage:${{ needs.vars.outputs.tag }}
          docker push ghcr.io/analect/backstage:${{ needs.vars.outputs.tag }}

  trivy:
    name: Trivy Scan 🔒
    runs-on: ubuntu-latest
    needs:
      - vars
      # - test
      - sonarqube
      - build
      - build-and-push
    steps:
      - name: Run Trivy vulnerability scanner 🔎
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/analect/backstage:${{ needs.vars.outputs.tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security Tab 📈
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    name: GitOps Deploy 🏗️
    runs-on: ubuntu-latest
    needs:
      - vars
      - sonarqube
      - build
      - build-and-push
      - trivy

    steps:
    - name: Set Kustomize 🛠️
      uses: imranismail/setup-kustomize@v1
      with:
        kustomize-version: "3.9.4"

    - name: GitOps Checkout 🛎️
      run: |
        git clone https://${{ secrets.ACCESS_TOKEN_GITHUB }}@github.com/analect-io/gitops
        cd gitops
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

    - name: Update Docker Image Tag ✨
      run: |
        cd gitops/apps/backstage/base
        OLD_TAG=$(cat kustomization.yaml | grep 'tag:' |  awk '{print $2}')
        NEW_TAG=${{ needs.vars.outputs.tag }}
        # kustomize edit set image analect/backstage:${{ needs.vars.outputs.tag }}
        sed -i "s|$OLD_TAG|$NEW_TAG|g" kustomization.yaml

    - name: Commit and Push 🚀
      run: |
        cd gitops/
        git commit -am ":robot: [GitHub Action] Set new image tag to https://github.com/analect-io/backstage/commit/${{ needs.vars.outputs.tag }}"
        git push

  slack-workflow-status:
    if: always()
    name: Post Status To Slack  📣
    needs:
      - vars
      - sonarqube
      - build
      - build-and-push
      - trivy
      - deploy
    runs-on: ubuntu-latest
    steps:
      - name: Slack Workflow Notification
        uses: Gamesight/slack-workflow-status@master
        with:
          # Required Input
          repo_token: ${{secrets.GITHUB_TOKEN}}
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          # Optional Input
          channel: 'github-notifications'
          name: 'github-notifications'
          # icon_emoji: ':poop:'
          icon_url: '${{ secrets.SLACK_ICON }}'
